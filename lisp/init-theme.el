(setq my-package-themes
      '((zenburn-theme                  . zenburn)
        (solarized-theme                . solarized-dark)
        (heroku-theme                   . heroku)
        (color-theme-sanityinc-tomorrow . sanityinc-tomorrow-eighties)
        (color-theme-sanityinc-tomorrow . sanityinc-tomorrow-night)
        (monokai-theme                  . monokai)
        ;; (moe-theme                      . moe-dark)
        ;; (molokai-theme                  . molokai)
        (tangotango-theme               . tango-dark)
        (tangotango-theme               . tangotango)
        (alect-themes                   . alect-dark)
        (alect-themes                   . alect-dark-alt)
        (alect-themes                   . alect-black)
        (alect-themes                   . alect-black-alt)
        (ample-zen-theme                . ample-zen)
        ;; (noctilux-theme                 . noctilux)
        (ample-theme                    . ample)
        (ample-theme                    . ample-flat)
        (atom-dark-theme                . atom-dark)
        (atom-one-dark-theme            . atom-one-dark)
        ;; (emacs-slime-theme              . emacs-slime)
        (sublime-themes                 . brin)
        ;; (sublime-themes                 . dorsey)
        ;; (sublime-themes                 . fogus)
        ;; (sublime-themes                 . graham)
        ;; (sublime-themes                 . granger)
        ;; (sublime-themes                 . hickey)
        (sublime-themes                 . junio)
        ;; (sublime-themes                 . mccarthy)
        (sublime-themes                 . odersky)
        ;; (sublime-themes                 . ritchie)
        (sublime-themes                 . spolsky)
        (sublime-themes                 . wilson)
        ))

(dolist (theme my-package-themes)
  (unless (package-installed-p (car theme))
    (unless package-archive-contents
      (package-refresh-contents))
    (package-install (car theme))))

(setq my-themes (append my-package-themes))

(defun my-load-random-theme ()
  "Randomly loads an installed theme."
  (interactive)
  (let* ((i (random (length my-themes)))
         (theme (cdr (nth i my-themes))))
    (load-theme theme t)
    (setq my-loaded-theme theme)
    (message (format "Theme loaded: %s" theme))))

(provide 'init-theme)
